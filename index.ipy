import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm

from sklearn.datasets import make_blobs

n_samples = 10000


# randomly distributed data at two corners of the graph...
centers = [(0.9, 0.05), (0.05, 0.94)]
X, y = make_blobs(n_samples=n_samples, n_features=2, cluster_std=0.4,
                  centers=centers, shuffle=False, random_state=42)

# Then filter out only the values that lie within [0,1]:
features = []
labels = []
for feature, label in zip(X, y):
    if (feature[0] >= 0 and feature[0] <= 1.0 and feature[1] >= 0 and feature[1] <= 1.0):
        features.append(feature)
        labels.append(label)

# And convert the results back into numpy arrays:
X = np.array(features)
y = np.array(labels)

#%matplotlib inline
#from pylab import *

plt.figure(figsize = (8, 6))
plt.scatter(X[:, 0], X[:, 1], c= y.astype(np.float))
plt.show()


#scaler zero to one specify's distance to the Bump and size of the Bump , Yellow dots represent near to bump slowdown the speed, Purple dots represent far from bump and increase in speed.
#Spliting data into train data and test data

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from sklearn.model_selection import train_test_split

y = keras.utils.to_categorical(y)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from sklearn.model_selection import train_test_split

y = keras.utils.to_categorical(y)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = Sequential()
model.add(Dense(32, activation='relu', input_shape = X_train.shape[1:]))
model.add(Dense(1, activation = 'sigmoid'))

#Using 32 hidden units in middle, final sigmoid activation function because it is going to be Binary Classification

model.summary()

#Defining four different categories in our data set instead of two

centers = [(0.9, 0.05), (0.05, 0.94), (0.3, 0.6), (0.8, 0.8)]
X, y = make_blobs(n_samples=n_samples, n_features=2, cluster_std=0.2,
                 centers=centers, shuffle=False, random_state=42)

features = []
labels = []
for feature, label in zip(X, y):
    if(feature[0] >= 0 and feature[0] <= 1.0 and feature[1] >= 0 and feature[1] <= 1.0):
        features.append(feature)
        labels.append(label)
        
X = np.array(features)
y = np.array(labels)

#from pylab import *

plt.figure(figsize= (8, 6))
plt.scatter(X[:,0], X[:,1], c=y.astype(np.float))
plt.show()

#Form now it is not a binary classification because i am going with Four categories

print (y[1])
y = keras.utils.to_categorical(y)
print(y[1])

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = Sequential()
model.add(Dense(16, activation='relu', input_shape = X_train.shape[1:]))
model.add(Dropout(0.2))
model.add(Dense(8, activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(4, activation='softmax'))

model.compile(loss='categorical_crossentropy',
             optimizer='adam',
             metrics=['accuracy'])

print(model.summary())

history = model.fit(X_train, y_train,
                   batch_size=100,
                   epochs=100,
                   verbose=2,
                   validation_data=(X_test, y_test))

scores = model.evaluate(X_test, y_test, verbose=1)
print('Test loss', scores[0])
print('Test accuracy', scores[1])

#Using Dropout to prevent overfitting
from sklearn.datasets import make_classification

X, y = make_classification(n_features=2, n_classes=4, n_samples=1000, n_redundant=0, n_informative=2,
                          random_state=47, n_clusters_per_class=1, scale=0.25)

#from pylab import *
plt.figure(figsize=(8, 6))
plt.scatter(X[:,0], X[:,1], c=y.astype(np.float))
plt.show()

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv2D, MaxPooling2D, Dropout, Flatten

def createModel(input_shape):
    model = Sequential()
    model.add(Conv2D(32, (3, 3), padding='same', activation='relu', input_shape=input_shape))
    model.add(Dropout(0.25))
    
    model.add(Flatten())
    model.add(Dense(512, activation='relu'))
    model.add(Dropout(0.5))
    model.add(Dense(10, activation='softmax'))
    
    return model

from tensorflow.keras.datasets import cifar10

(x_train, y_train), (x_test, y_test) = cifar10.load_data()

plt.imshow(x_train[1])
print(x_train.shape)
print(x_train.shape[0])
print(x_test.shape[0])

print(y_test[0])
y_train = tf.keras.utils.to_categorical(y_train, 10)
y_test = tf.keras.utils.to_categorical(y_test, 10)
print (y_test[0])

#%matplotlib inline

class_names = ['airoplane', 'automobile', 'bird', 'cat', 'deer',
              'dog', 'frog', 'horse', 'ship', 'truck']

fig, axes = plt.subplots(3, 3)
fig.subplots_adjust(hspace=0.6, wspace=0.3)

for i, ax in enumerate(axes.flat):
    ax.imshow(x_train[i])
    
    xlabel = 'class: {0}'.format(class_names[y_train[i].argmax()])
    
    #showing the classes as the label on the x-axis.
    ax.set_xlabel(xlabel)
    
    #Removing ticks from the plot.
    ax.set_xticks([])
    ax.set_yticks([])

#Converting 8-bit data to the range of 0-255(floating point) values range from 0 to 9

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255

#Using RMSprop as an optimizer
opt = tf.keras.optimizers.RMSprop(lr=0.0001, decay=1e-6)

model = createModel(x_train.shape[1:])

model.compile(loss='categorical_crossentropy',
             optimizer=opt,
             metrics=['accuracy'])


model.summary()

import time

start_time = time.time()

model.fit(x_train, y_train,
         batch_size=32,
         epochs=10,
         validation_data=(x_test, y_test),
         shuffle=True)

elapsed_time = time.time() - start_time
print(elapsed_time)

scores = model.evaluate(x_test, y_test, verbose=1)

print('Test loss:', scores[0])
print('Test acuracy:', scores[1])

#Going with 100 test images and displaying the ones it got wrong
for x in range(100):
    test_image = x_test[x,:]
    predicted_cat = model.predict(np.array([test_image])).argmax()
    label = y_test[x].argmax()
    if (predicted_cat != label):
        plt.title('prediction: %s Label: %s' % (class_names[predicted_cat], class_names[label]))
        plt.imshow(test_image)
        plt.show()

#Pooling layer with a window 2*2
def createModel(input_shape):
    model = Sequential()
    model.add(Conv2D(32, (3, 3), padding='same', activation='relu', input_shape=input_shape))
    model.add(Conv2D(32, (3, 3), activation='relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))
    model.add(Dropout(0.25))
    
    model.add(Conv2D(64, (3, 3), padding='same', activation='relu'))
    model.add(Conv2D(64, (3, 3), activation='relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))
    model.add(Dropout(0.25))
    
    model.add(Conv2D(64, (3, 3), padding='same', activation='relu'))
    model.add(Conv2D(64, (3, 3), activation='relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))
    model.add(Dropout(0.25))
    
    model.add(Flatten())
    model.add(Dense(512, activation='relu'))
    model.add(Dropout(0.5))
    model.add(Dense(10, activation='softmax'))
    
    return model


from tensorflow.keras.datasets import cifar10

(x_train, y_train), (x_test, y_test) = cifar10.load_data()
print(x_train.shape)
print(x_train.shape[0])
print(x_test.shape[0])

print(y_test[0])
y_train = tf.keras.utils.to_categorical(y_train, 10)
y_test = tf.keras.utils.to_categorical(y_test, 10)
print (y_test[0])

#%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np

class_names = ['airoplane', 'automobile', 'bird', 'cat', 'deer',
              'dog', 'frog', 'horse', 'ship', 'truck']

fig,axes = plt.subplots(3, 3)
fig.subplots_adjust(hspace=0.6, wspace=0.3)


for i, ax in enumerate(axes.flat):
    ax.imshow(x_train[i])
    
    xlabel = 'class: {0}'.format(class_names[y_train[i].argmax()])
    
    #label on the x-axis.
    
    ax.set_xlabel(xlabel)
    
    #remove ticks from plot
    ax.set_xticks([])
    ax.set_yticks([])

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_test /= 255
x_test /=255

opt = tf.keras.optimizers.RMSprop(lr=0.0001, decay=1e-6)

model = createModel(x_train.shape[1:])

model.compile(loss='categorical_crossentropy',
             optimizer=opt, 
             metrics=['accuracy'])

model.summary()

import time

start_time = time.time()

model.fit(x_train, y_train,
         batch_size=32,
         epochs=10,
         validation_data=(x_test, y_test),
         shuffle=True)

elapsed_time = time.time() - start_time

print(elapsed_time)

scores  = model.evaluate(x_test, y_test, verbose=1)
print('Test loass:', scores[0])
print('Test accuracy', scores[1])

#Lane detection in video


import cv2 as cv
import numpy as np


def make_points(image, line):
    slope, intercept = line
    y1 = int(image.shape[0])# bottom of the image
    y2 = int(y1*3/5)         # slightly lower than the middle
    x1 = int((y1 - intercept)/slope)
    x2 = int((y2 - intercept)/slope)
    return [[x1, y1, x2, y2]]
 
def average_slope_intercept(image, lines):
    left_fit    = []
    right_fit   = []
    if lines is None:
        return None
    for line in lines:
        for x1, y1, x2, y2 in line:
            fit = np.polyfit((x1,x2), (y1,y2), 1)
            slope = fit[0]
            intercept = fit[1]
            if slope < 0: 
                left_fit.append((slope, intercept))
            else:
                right_fit.append((slope, intercept))
   
    left_fit_average  = np.average(left_fit, axis=0)
    right_fit_average = np.average(right_fit, axis=0)
    left_line  = make_points(image, left_fit_average)
    right_line = make_points(image, right_fit_average)
    averaged_lines = [left_line, right_line]
    return averaged_lines
 
def canny(img):
    gray = cv.cvtColor(img, cv.COLOR_RGB2GRAY)
    blur = cv.GaussianBlur(gray,(5, 5),0)
    canny = cv.Canny(gray, 50, 150)
    return canny
 
def display_lines(img,lines):
    line_image = np.zeros_like(img)
    if lines is not None:
        for line in lines:
            for x1, y1, x2, y2 in line:
                cv.line(line_image,(x1,y1),(x2,y2),(255,0,0),10)
    return line_image
 
def region_of_interest(canny):
    height = canny.shape[0]
    width = canny.shape[1]
    mask = np.zeros_like(canny)
 
    triangle = np.array([[
    (200, height),
    (550, 250),
    (1100, height),]], np.int32)
    cv.fillPoly(mask, triangle, 255)
    masked_image = cv.bitwise_and(canny, mask)
    return masked_image
 

cap = cv.VideoCapture("test2.mp4")
while(cap.isOpened()):
    _, frame = cap.read()
    canny_image = canny(frame)
    cropped_canny = region_of_interest(canny_image)
    lines = cv.HoughLinesP(cropped_canny, 2, np.pi/180, 100, np.array([]), minLineLength=40,maxLineGap=5)
    averaged_lines = average_slope_intercept(frame, lines)
    line_image = display_lines(frame, averaged_lines)
    combo_image = cv.addWeighted(frame, 0.8, line_image, 1, 1)
    cv.imshow("result", combo_image)
    if cv.waitKey(1) & 0xFF == ord('q'): #To quit press 'q'
        break
        
cap.release()
cv.destroyAllWindows()

import tkinter
from tkinter import messagebox

# This code is to hide the main tkinter window
root = tkinter.Tk()
root.withdraw()

# Message Box
messagebox.showinfo("Alert", "In Lane")

#writing to json

import json

d = handle = open('index.ipy','r')
content = handle.read()
handle.close()

d = json.loads(content)

j = json.dumps(d)

handle = open('Lane_detection', 'w')
handle.write(j)
handle.close()
